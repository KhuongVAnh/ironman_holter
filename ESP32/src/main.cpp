#include <WiFi.h>
#include <HTTPClient.h>
#include <math.h>

// ====================== C·∫§U H√åNH WI-FI ======================
const char *ssid = "LOFI 108 Le Thanh Nghi"; // üîß Thay b·∫±ng SSID th·∫≠t
const char *password = "camonquykhach";      // üîß Thay b·∫±ng password th·∫≠t

// ====================== C·∫§U H√åNH SERVER ======================
const char *serverURL = "http://192.168.1.163:8888/api/readings/telemetry"; // üîß ƒê·ªãa ch·ªâ backend Node.js

// ====================== C·∫§U H√åNH H·ªÜ TH·ªêNG ======================
#define ECG_PIN 34
#define FS 250           // T·∫ßn s·ªë l·∫•y m·∫´u (Hz)
#define BUFFER_SIZE 1250 // 5s √ó 250Hz
#define DEVICE_ID "device_1"

hw_timer_t *timer = NULL;
portMUX_TYPE timerMux = portMUX_INITIALIZER_UNLOCKED;

volatile bool sampleFlag = false;
float ecgBuffer[BUFFER_SIZE];
int bufferIndex = 0;

// ====================== C·∫§U TR√öC B·ªò L·ªåC ======================
struct Biquad
{
  float b0, b1, b2, a1, a2;
  float x1 = 0, x2 = 0, y1 = 0, y2 = 0;

  float process(float x)
  {
    float y = b0 * x + b1 * x1 + b2 * x2 - a1 * y1 - a2 * y2;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
    return y;
  }
};

// Khai b√°o b·ªô l·ªçc
Biquad highpass;
Biquad notch;
Biquad lowpass;

// ====================== NG·∫ÆT TIMER 4 ms (250 Hz) ======================
void IRAM_ATTR onTimer()
{
  portENTER_CRITICAL_ISR(&timerMux);
  sampleFlag = true;
  portEXIT_CRITICAL_ISR(&timerMux);
}

// ====================== K·∫æT N·ªêI WI-FI ======================
void setupWiFi()
{
  Serial.print("üîå K·∫øt n·ªëi Wi-Fi t·ªõi: ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED)
  {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ Wi-Fi ƒë√£ k·∫øt n·ªëi!");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());
}

// ====================== G·ª¨I D·ªÆ LI·ªÜU L√äN SERVER ======================
void sendDataToServer(float *data, int length, float hr)
{
  if (WiFi.status() != WL_CONNECTED)
  {
    Serial.println("‚ö†Ô∏è M·∫•t k·∫øt n·ªëi Wi-Fi, b·ªè qua g√≥i n√†y.");
    return;
  }

  String json = "{\"device_id\":\"" + String(DEVICE_ID) + "\",\"heart_rate\":" + String(hr) + ",\"ecg_signal\":[";
  for (int i = 0; i < length; i++)
  {
    json += String(data[i], 4);
    if (i < length - 1)
      json += ",";
  }
  json += "]}";

  HTTPClient http;
  http.begin(serverURL);
  http.addHeader("Content-Type", "application/json");
  int code = http.POST(json);

  if (code > 0)
    Serial.printf("üì° G·ª≠i th√†nh c√¥ng! M√£ ph·∫£n h·ªìi: %d\n", code);
  else
    Serial.printf("‚ùå G·ª≠i th·∫•t b·∫°i! L·ªói: %d\n", code);

  http.end();
}

// ====================== SETUP ======================
void setup()
{
  Serial.begin(115200);
  setupWiFi();

  // ===== Kh·ªüi t·∫°o b·ªô l·ªçc High-pass (0.5 Hz) =====
  highpass.b0 = 0.995;
  highpass.b1 = -1.99;
  highpass.b2 = 0.995;
  highpass.a1 = -1.99;
  highpass.a2 = 0.99;

  // ===== Kh·ªüi t·∫°o b·ªô l·ªçc Notch (50 Hz) =====
  float f0 = 50.0;
  float r = 0.95;
  float w0 = 2 * PI * f0 / FS;
  notch.b0 = 1.0;
  notch.b1 = -2 * cos(w0);
  notch.b2 = 1.0;
  notch.a1 = -2 * r * cos(w0);
  notch.a2 = r * r;

  // ===== Kh·ªüi t·∫°o b·ªô l·ªçc Low-pass (40 Hz) =====
  lowpass.b0 = 0.1311;
  lowpass.b1 = 0.2622;
  lowpass.b2 = 0.1311;
  lowpass.a1 = -0.7478;
  lowpass.a2 = 0.2722;

  // ===== B·∫≠t timer l·∫•y m·∫´u 250 Hz =====
  timer = timerBegin(0, 80, true); // Prescaler 80 ‚Üí 1 tick = 1 ¬µs
  timerAttachInterrupt(timer, &onTimer, true);
  timerAlarmWrite(timer, 4000, true); // 4000 ¬µs = 4 ms
  timerAlarmEnable(timer);

  Serial.println("‚úÖ B·∫Øt ƒë·∫ßu l·∫•y t√≠n hi·ªáu ECG @250 Hz v·ªõi 3 b·ªô l·ªçc DSP...");
}

// ====================== LOOP ======================
void loop()
{
  if (sampleFlag)
  {
    portENTER_CRITICAL(&timerMux);
    sampleFlag = false;
    portEXIT_CRITICAL(&timerMux);

    // ---- 1Ô∏è‚É£ ƒê·ªçc t√≠n hi·ªáu t·ª´ AD8232 ----
    int raw = analogRead(ECG_PIN);
    float voltage = (raw / 4095.0) * 3.3; // 0‚Äì3.3 V
    float centered = voltage - 1.65;      // D·ªãch baseline v·ªÅ 0 V

    // ---- 2Ô∏è‚É£ L·ªçc qua 3 t·∫ßng ----
    float y1 = highpass.process(centered);
    float y2 = notch.process(y1);
    float y3 = lowpass.process(y2);

    // ---- 3Ô∏è‚É£ L∆∞u v√†o buffer ----
    ecgBuffer[bufferIndex++] = y3;

    // ---- 4Ô∏è‚É£ G·ª≠i m·ªói 5 gi√¢y ----
    if (bufferIndex >= BUFFER_SIZE)
    {
      Serial.println("üöÄ ƒê√£ thu ƒë·ªß 5 s d·ªØ li·ªáu, g·ª≠i l√™n server...");
      float hr = 75.0; // T·∫°m, s·∫Ω thay b·∫±ng HR th·∫≠t sau
      sendDataToServer(ecgBuffer, BUFFER_SIZE, hr);
      bufferIndex = 0;
    }
  }
}
