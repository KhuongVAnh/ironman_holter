"use client"

import { useState, useEffect } from "react"
import { useAuth } from "../../contexts/AuthContext"
import { toast } from "react-toastify"
import io from "socket.io-client"
import ECGChart from "./ECGChart"
import useECGStream from "./useECGStream"
import axios from "axios"

const PatientDashboard = () => {
  const { user } = useAuth()
  const [currentHeartRate, setCurrentHeartRate] = useState(75)
  const [rawEcgData, setRawEcgData] = useState([]) // d·ªØ li·ªáu g·ªëc 5s t·ª´ ESP32
  const [alerts, setAlerts] = useState([])
  const [recentAlerts, setRecentAlerts] = useState([])
  const [isConnected, setIsConnected] = useState(false)
  const [socket, setSocket] = useState(null)
  const [aiResult, setAiResult] = useState(null)
  const [supervisingDoctors, setSupervisingDoctors] = useState([])

  useEffect(() => {
    // üîπ Kh·ªüi t·∫°o Socket.IO
    const newSocket = io(process.env.REACT_APP_API_BASE_URL || "http://localhost:4000")
    setSocket(newSocket)

    newSocket.on("connect", () => {
      setIsConnected(true)
      newSocket.emit("join-user-room", user.user_id)
      console.log("ƒê√£ k·∫øt n·ªëi Socket.IO")
    })

    newSocket.on("disconnect", () => {
      setIsConnected(false)
      console.log("Ng·∫Øt k·∫øt n·ªëi Socket.IO")
    })

    // üîπ X·ª≠ l√Ω d·ªØ li·ªáu ECG (c·∫£ th·∫≠t & gi·∫£)
    const handleEcgData = (data) => {
      setCurrentHeartRate(data.heart_rate)
      // ‚öôÔ∏è Kh√¥ng reset li√™n t·ª•c, ch·ªâ c·∫≠p nh·∫≠t n·∫øu c√≥ t√≠n hi·ªáu m·ªõi th·ª±c s·ª±
      if (Array.isArray(data.ecg_signal) && data.ecg_signal.length > 0) {
        setRawEcgData(data.ecg_signal)
      }

      setAiResult({
        result: "b√¨nh th∆∞·ªùng",
        time: data.timestamp,
        hr: data.heart_rate,
      })

      if (data.abnormal_detected) {
        toast.warning(`Ph√°t hi·ªán b·∫•t th∆∞·ªùng: ${data.heart_rate} bpm`)
      }
    }

    newSocket.on("reading-update", handleEcgData)
    newSocket.on("fake-reading", handleEcgData)

    // üîπ L·∫Øng nghe c·∫£nh b√°o realtime
    newSocket.on("alert", (alertData) => {
      if (alertData.user_id === user.user_id) {
        toast.error(`C·∫£nh b√°o: ${alertData.message}`)
        fetchRecentAlerts()
      }
    })

    // üîπ L·∫•y c·∫£nh b√°o ban ƒë·∫ßu
    fetchRecentAlerts()
    fetchSupervisingDoctors()

    return () => {
      newSocket.close()
    }
  }, [user.user_id])

  // üîπ M√¥ ph·ªèng d·ªØ li·ªáu ch·∫°y t·ª´ng 0.5s, hi·ªÉn th·ªã 4s 
  const streamedEcgData = useECGStream(rawEcgData, 250, 0.2)

  // L·∫•y c·∫£nh b√°o m·ªõi nh·∫•t
  const fetchRecentAlerts = async () => {
    try {
      const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/alerts/${user.user_id}?resolved=false`)
      setAlerts(response.data.alerts)
      console.log(response.data.alerts)
      setRecentAlerts(response.data.alerts.slice(0, 5))
    } catch (error) {
      console.error("L·ªói l·∫•y c·∫£nh b√°o:", error)
    }
  }

  // T·∫°o d·ªØ li·ªáu gi·∫£
  const generateFakeData = async () => {
    try {
      const deviceId = `device_${user.user_id}`
      await axios.post(`${process.env.REACT_APP_API_BASE_URL}/api/readings/fake`, { device_id: deviceId })
      toast.success("ƒê√£ t·∫°o d·ªØ li·ªáu gi·∫£ l·∫≠p")
    } catch (error) {
      console.error("L·ªói t·∫°o d·ªØ li·ªáu gi·∫£:", error)
      toast.error("Kh√¥ng th·ªÉ t·∫°o d·ªØ li·ªáu gi·∫£ l·∫≠p")
    }
  }

  // üîπ Danh s√°ch b√°c sƒ© gi√°m s√°t
  const fetchSupervisingDoctors = async () => {
    try {
      const res = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/access/list/${user.user_id}`)
      const doctors = res.data
        .filter(acc => acc.role === "b√°c sƒ©" && acc.status === "accepted")
        .map((acc) => ({
          id: acc.viewer_id,
          name: acc.viewer?.name || "Kh√¥ng r√µ",
          email: acc.viewer?.email || "‚Äî",
          phone: acc.viewer?.phone || "0123456789", // gi·∫£ ƒë·ªãnh ch∆∞a c√≥ c·ªôt phone
          status: acc.status,
        }))
      setSupervisingDoctors(doctors)
    } catch (error) {
      console.error("‚ùå L·ªói t·∫£i danh s√°ch b√°c sƒ©:", error)
      toast.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch b√°c sƒ© gi√°m s√°t")
    }
  }


  // Tr·∫°ng th√°i nh·ªãp tim
  const getHeartRateStatus = () => {
    if (currentHeartRate < 60) return { status: "Nh·ªãp ch·∫≠m", color: "text-warning" }
    if (currentHeartRate > 100) return { status: "Nh·ªãp nhanh", color: "text-danger" }
    return { status: "B√¨nh th∆∞·ªùng", color: "text-success" }
  }
  const heartRateStatus = getHeartRateStatus()

  const getAlertIcon = (alertType = "") => {
    const type = alertType.toLowerCase();

    switch (type) {
      case "nh·ªãp nhanh":
        return "fas fa-arrow-up text-primary"; // Tim nhanh
      case "rung nhƒ©":
        return "fas fa-heart-crack text-danger"; // R·ªëi lo·∫°n nh·ªãp
      case "ngo·∫°i t√¢m thu":
        return "fas fa-bolt text-warning"; // Xung ƒëi·ªán b·∫•t th∆∞·ªùng
      case "nh·ªãp ch·∫≠m":
        return "fas fa-arrow-down text-primary"; // Tim ch·∫≠m
      case "normal":
      case "b√¨nh th∆∞·ªùng":
        return "fas fa-check-circle text-success"; // B√¨nh th∆∞·ªùng
      default:
        return "fas fa-heartbeat text-danger"; // Kh√¥ng x√°c ƒë·ªãnh
    }
  };

  const getAlertTextColor = (alertType = "") => {
    const type = alertType.toLowerCase();

    switch (type) {
      case "nh·ªãp nhanh":
        return "text-primary";
      case "rung nhƒ©":
        return "text-danger";
      case "ngo·∫°i t√¢m thu":
        return "text-warning";
      case "nh·ªãp ch·∫≠m":
        return "text-primary";
      case "normal":
      case "b√¨nh th∆∞·ªùng":
        return "text-success";
      default:
        return "text-danger";
    }
  };


  return (
    <div className="container-fluid py-4">
      <div className="row">
        <div className="col-12">
          <div className="d-flex justify-content-between align-items-center mb-4">
            <h1 className="h3 mb-0">
              <i className="fas fa-tachometer-alt me-2 text-primary"></i>
              Dashboard B·ªánh nh√¢n
            </h1>
            <div className="d-flex align-items-center gap-3">
              <div className={`badge ${isConnected ? "bg-success" : "bg-danger"}`}>
                <i className={`fas ${isConnected ? "fa-wifi" : "fa-wifi-slash"} me-1`}></i>
                {isConnected ? "ƒê√£ k·∫øt n·ªëi" : "M·∫•t k·∫øt n·ªëi"}
              </div>
              <button className="btn btn-outline-primary btn-sm" onClick={generateFakeData}>
                <i className="fas fa-play me-1"></i>
                T·∫°o d·ªØ li·ªáu gi·∫£
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Nh·ªãp tim & AI */}
      <div className="row g-4">
        <div className="col-md-4">
          <div className="card h-100 border-0 shadow-sm">
            <div className="card-body text-center">
              <div className="mb-3">
                <i className="fas fa-heartbeat fa-3x text-danger"></i>
              </div>
              <h2 className="display-4 fw-bold mb-2">{currentHeartRate}</h2>
              <p className="text-muted mb-2">BPM</p>
              <span className={`badge fs-6 ${heartRateStatus.color.replace("text-", "bg-")}`}>
                {heartRateStatus.status}
              </span>

              {/* K·∫øt qu·∫£ AI */}
              <div className="mt-4">
                <div className="card border-0 bg-light">
                  <div className="card-body p-2">
                    <h6 className="text-muted mb-1">
                      <i className="fas fa-robot me-2 text-success"></i>K·∫øt qu·∫£ AI
                    </h6>
                    {aiResult ? (
                      <p className="fw-bold small mb-0">
                        HR: {aiResult.hr} | AI: {aiResult.result} <br />
                        <small className="text-muted">
                          {new Date(aiResult.time).toLocaleString("vi-VN")}
                        </small>
                      </p>
                    ) : (
                      <p className="text-muted small mb-0">ƒêang ch·ªù d·ªØ li·ªáu...</p>
                    )}
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Bi·ªÉu ƒë·ªì ECG */}
        <div className="col-md-8">
          <div className="card h-100 border-0 shadow-sm">
            <div className="card-header bg-white border-0">
              <h5 className="card-title mb-0">
                <i className="fas fa-chart-line me-2 text-primary"></i>
                Bi·ªÉu ƒë·ªì ECG Realtime
              </h5>
            </div>
            <div className="card-body">
              <ECGChart data={streamedEcgData} />
            </div>
          </div>
        </div>
      </div>

      {/* C√°c ph·∫ßn c√≤n l·∫°i gi·ªØ nguy√™n */}
      <div className="row g-4 mt-2">
        {/* C·∫£nh b√°o g·∫ßn nh·∫•t */}
        <div className="col-md-6">
          <div className="card border-0 shadow-sm">
            <div className="card-header bg-white border-0">
              <h5 className="card-title mb-0">
                <i className="fas fa-exclamation-triangle me-2 text-warning"></i>
                C·∫£nh b√°o g·∫ßn nh·∫•t
              </h5>
            </div>
            <div className="card-body">
              {recentAlerts.length > 0 ? (
                <div className="list-group list-group-flush">
                  {recentAlerts.map(alert => (
                    <div key={alert.alert_id} className="list-group-item px-0 border-0">
                      <div className="d-flex justify-content-between align-items-start">
                        <div>
                          <h6 className={`mb-2 fw-semibold d-flex align-items-center gap-2 ${getAlertTextColor(alert.alert_type)}`}>
                            <i className={`${getAlertIcon(alert.alert_type)} fs-5`}></i>
                            {alert.alert_type.toUpperCase()}
                          </h6>
                          <p className="mb-1 text-muted small">{alert.message}</p>
                          <small className="text-muted">
                            {new Date(alert.timestamp).toLocaleString("vi-VN")}
                          </small>
                        </div>
                        <span className="badge bg-danger">M·ªõi</span>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-4">
                  <i className="fas fa-check-circle fa-3x text-success mb-3"></i>
                  <p className="text-muted">Kh√¥ng c√≥ c·∫£nh b√°o n√†o</p>
                </div>
              )}
            </div>
          </div>
        </div>

        {/* Th·ªëng k√™ + B√°c sƒ© gi√°m s√°t c√πng kh·ªëi */}
        <div className="col-md-6">
          {/* Th·ªëng k√™ h√¥m nay */}
          <div className="card border-0 shadow-sm mb-4">
            <div className="card-header bg-white border-0">
              <h5 className="card-title mb-0">
                <i className="fas fa-chart-bar me-2 text-info"></i>
                Th·ªëng k√™ h√¥m nay
              </h5>
            </div>
            <div className="card-body">
              <div className="row text-center">
                <div className="col-4 border-end">
                  <h4 className="text-primary mb-1">24h</h4>
                  <small className="text-muted">Theo d√µi</small>
                </div>
                <div className="col-4 border-end">
                  <h4 className="text-success mb-1">98%</h4>
                  <small className="text-muted">B√¨nh th∆∞·ªùng</small>
                </div>
                <div className="col-4">
                  <h4 className="text-warning mb-1">{alerts.length}</h4>
                  <small className="text-muted">C·∫£nh b√°o</small>
                </div>
              </div>
            </div>
          </div>

          {/* B√°c sƒ© gi√°m s√°t */}
          <div className="card border-0 shadow-sm">
            <div className="card-header bg-white border-0">
              <h5 className="card-title mb-0">
                <i className="fas fa-user-md me-2 text-primary"></i>
                B√°c sƒ© gi√°m s√°t
              </h5>
            </div>
            <div className="card-body">
              {supervisingDoctors.length > 0 ? (
                <div className="table-responsive">
                  <table className="table table-striped align-middle">
                    <thead>
                      <tr>
                        <th>T√™n b√°c sƒ©</th>
                        <th>Email</th>
                        <th>S·ªë ƒëi·ªán tho·∫°i</th>
                        <th>Tr·∫°ng th√°i</th>
                      </tr>
                    </thead>
                    <tbody>
                      {supervisingDoctors.map((doc) => (
                        <tr key={doc.id}>
                          <td>{doc.name}</td>
                          <td>{doc.email}</td>
                          <td>{doc.phone}</td>
                          <td>
                            <span className="badge bg-success">{doc.status}</span>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              ) : (
                <p className="text-muted text-center mb-0">Ch∆∞a c√≥ b√°c sƒ© n√†o ƒëang gi√°m s√°t b·∫°n.</p>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* H∆∞·ªõng d·∫´n nhanh */}
      <div className="row mt-4">
        <div className="col-12">
          <div className="card border-0 shadow-sm bg-light">
            <div className="card-body">
              <h6 className="card-title">
                <i className="fas fa-info-circle me-2 text-info"></i>
                H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
              </h6>
              <div className="row">
                <div className="col-md-3">
                  <small className="text-muted">
                    <i className="fas fa-chart-line me-1"></i>Theo d√µi ECG realtime
                  </small>
                </div>
                <div className="col-md-3">
                  <small className="text-muted">
                    <i className="fas fa-bell me-1"></i>Nh·∫≠n c·∫£nh b√°o t·ª©c th√¨
                  </small>
                </div>
                <div className="col-md-3">
                  <small className="text-muted">
                    <i className="fas fa-comments me-1"></i>T∆∞ v·∫•n v·ªõi AI
                  </small>
                </div>
                <div className="col-md-3">
                  <small className="text-muted">
                    <i className="fas fa-history me-1"></i>Xem l·ªãch s·ª≠ chi ti·∫øt
                  </small>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

export default PatientDashboard
