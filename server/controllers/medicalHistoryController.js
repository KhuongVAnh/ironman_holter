"use strict";

const { MedicalHistory, AccessPermission, User } = require("../models");
const { Op } = require("sequelize");

// üîπ 1. L·∫•y to√†n b·ªô b·ªánh s·ª≠ c·ªßa b·ªánh nh√¢n (theo user_id)
exports.getHistories = async (req, res) => {
    try {
        const { user_id } = req.params;
        const requester_id = req.user.user_id;

        // Ki·ªÉm tra quy·ªÅn truy c·∫≠p
        const access = await AccessPermission.findOne({
            where: {
                patient_id: user_id,
                viewer_id: requester_id,
                status: "accepted",
            },
        });

        // N·∫øu kh√¥ng ph·∫£i ch√≠nh b·ªánh nh√¢n, c≈©ng kh√¥ng ƒë∆∞·ª£c c·∫•p quy·ªÅn ‚Üí t·ª´ ch·ªëi
        if (parseInt(user_id) !== requester_id && !access) {
            return res.status(403).json({ error: "B·∫°n kh√¥ng c√≥ quy·ªÅn xem b·ªánh s·ª≠ n√†y" });
        }

        const histories = await MedicalHistory.findAll({
            where: { user_id, deleted_at: null },
            include: [
                { model: User, as: "doctor", attributes: ["user_id", "name", "email", "role"] },
            ],
            order: [["created_at", "DESC"]],
        });

        return res.json(histories);
    } catch (error) {
        console.error("Error fetching medical histories:", error);
        return res.status(500).json({ error: "L·ªói khi t·∫£i b·ªánh s·ª≠" });
    }
};

// üîπ 2. B√°c sƒ© th√™m b·∫£n ghi b·ªánh s·ª≠ m·ªõi
exports.createHistory = async (req, res) => {
    try {
        const { user_id, doctor_diagnosis, medication, condition, notes } = req.body;
        const doctor_id = req.user.user_id;

        const newHistory = await MedicalHistory.create({
            user_id,
            doctor_id,
            doctor_diagnosis,
            medication,
            condition,
            notes,
        });

        // Emit socket event n·∫øu c√≥
        const io = req.app.get("io");
        io.emit("new-history", { user_id, doctor_id });

        return res.status(201).json({
            message: "Th√™m b·ªánh s·ª≠ th√†nh c√¥ng",
            data: newHistory,
        });
    } catch (error) {
        console.error("Error creating medical history:", error);
        return res.status(500).json({ error: "L·ªói khi th√™m b·ªánh s·ª≠" });
    }
};

// üîπ 3. B√°c sƒ© c·∫≠p nh·∫≠t b·ªánh s·ª≠ (t√¨nh tr·∫°ng / thu·ªëc / ch·∫©n ƒëo√°n)
exports.updateHistory = async (req, res) => {
    try {
        const { id } = req.params;
        const { doctor_diagnosis, medication, condition, notes } = req.body;

        const history = await MedicalHistory.findByPk(id);
        if (!history) return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y b·ªánh s·ª≠" });

        await history.update({ doctor_diagnosis, medication, condition, notes });

        const io = req.app.get("io");
        io.emit("update-history", { history_id: id });

        return res.json({ message: "C·∫≠p nh·∫≠t b·ªánh s·ª≠ th√†nh c√¥ng", data: history });
    } catch (error) {
        console.error("Error updating medical history:", error);
        return res.status(500).json({ error: "L·ªói khi c·∫≠p nh·∫≠t b·ªánh s·ª≠" });
    }
};

// üîπ 4. B·ªánh nh√¢n th√™m tri·ªáu ch·ª©ng
exports.addSymptom = async (req, res) => {
    try {
        const { id } = req.params;
        const { symptom } = req.body;
        const history = await MedicalHistory.findByPk(id);

        if (!history) return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y b·ªánh s·ª≠" });

        let symptoms = [];
        if (history.symptoms) {
            symptoms = JSON.parse(history.symptoms);
        }
        symptoms.push(symptom);

        await history.update({ symptoms: JSON.stringify(symptoms) });

        return res.json({ message: "ƒê√£ th√™m tri·ªáu ch·ª©ng", data: history });
    } catch (error) {
        console.error("Error adding symptom:", error);
        return res.status(500).json({ error: "L·ªói khi th√™m tri·ªáu ch·ª©ng" });
    }
};

// üîπ 5. AI c·∫≠p nh·∫≠t ch·∫©n ƒëo√°n
exports.updateAIResult = async (req, res) => {
    try {
        const { id } = req.params;
        const { ai_diagnosis } = req.body;

        const history = await MedicalHistory.findByPk(id);
        if (!history) return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y b·ªánh s·ª≠" });

        await history.update({ ai_diagnosis });

        const io = req.app.get("io");
        io.emit("ai-diagnosis", { history_id: id, ai_diagnosis });

        return res.json({ message: "ƒê√£ c·∫≠p nh·∫≠t ch·∫©n ƒëo√°n AI", data: history });
    } catch (error) {
        console.error("Error updating AI diagnosis:", error);
        return res.status(500).json({ error: "L·ªói khi c·∫≠p nh·∫≠t AI diagnosis" });
    }
};

// üîπ 6. X√≥a (soft delete)
exports.deleteHistory = async (req, res) => {
    try {
        const { id } = req.params;
        const requester_id = req.user.user_id;

        const history = await MedicalHistory.findByPk(id);
        if (!history) return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y b·∫£n ghi" });

        // Ch·ªâ b·ªánh nh√¢n ho·∫∑c b√°c sƒ© ƒë∆∞·ª£c x√≥a
        if (history.user_id !== requester_id && history.doctor_id !== requester_id) {
            return res.status(403).json({ error: "Kh√¥ng c√≥ quy·ªÅn x√≥a b·ªánh s·ª≠ n√†y" });
        }

        await history.destroy(); // v√¨ d√πng paranoid: true ‚Üí soft delete

        return res.json({ message: "ƒê√£ x√≥a (·∫©n) b·ªánh s·ª≠" });
    } catch (error) {
        console.error("Error deleting history:", error);
        return res.status(500).json({ error: "L·ªói khi x√≥a b·ªánh s·ª≠" });
    }
};
