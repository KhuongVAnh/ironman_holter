"use strict";

const { AccessPermission, User } = require("../models");

// 1Ô∏è‚É£ B·ªánh nh√¢n g·ª≠i y√™u c·∫ßu c·∫•p quy·ªÅn
exports.shareAccess = async (req, res) => {
    try {
        const { viewer_email, role } = req.body;
        const { user_id } = req.user; // JWT decode ‚Üí id c·ªßa ng∆∞·ªùi g·ª≠i (b·ªánh nh√¢n)
        const io = req.app.get("io");

        const viewer = await User.findOne({ where: { email: viewer_email } });
        if (!viewer) {
            return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng theo email n√†y" });
        }

        // Ki·ªÉm tra xem ƒë√£ t·ªìn t·∫°i quy·ªÅn ch∆∞a
        const existing = await AccessPermission.findOne({
            where: { patient_id: user_id, viewer_id: viewer.user_id },
        });

        if (existing) {
            return res.status(400).json({ error: "ƒê√£ g·ª≠i y√™u c·∫ßu ho·∫∑c ƒë√£ c√≥ quy·ªÅn tr∆∞·ªõc ƒë√≥" });
        }

        const newPermission = await AccessPermission.create({
            patient_id: user_id,
            viewer_id: viewer.user_id,
            role,
            status: "pending",
        });

        // üîî G·ª≠i socket event cho ng∆∞·ªùi ƒë∆∞·ª£c m·ªùi
        io.emit("access-request", {
            viewer_id: viewer.user_id,
            patient_id: user_id,
            role,
        });

        return res.status(201).json({
            message: "ƒê√£ g·ª≠i y√™u c·∫ßu chia s·∫ª quy·ªÅn truy c·∫≠p",
            data: newPermission,
        });
    } catch (error) {
        console.error("Error sharing access:", error);
        return res.status(500).json({ error: "L·ªói khi chia s·∫ª quy·ªÅn truy c·∫≠p" });
    }
};

// 2Ô∏è‚É£ Viewer ch·∫•p nh·∫≠n ho·∫∑c t·ª´ ch·ªëi y√™u c·∫ßu
exports.respondAccess = async (req, res) => {
    try {
        const { id } = req.params;
        const { action } = req.body; // accept | reject
        const io = req.app.get("io");

        const permission = await AccessPermission.findByPk(id);
        if (!permission) return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu n√†y" });

        permission.status = action === "accept" ? "accepted" : "rejected";
        await permission.save();

        // üîî Th√¥ng b√°o realtime cho b·ªánh nh√¢n
        io.emit("access-response", {
            patient_id: permission.patient_id,
            viewer_id: permission.viewer_id,
            status: permission.status,
        });

        return res.json({
            message: `ƒê√£ ${action === "accept" ? "ch·∫•p nh·∫≠n" : "t·ª´ ch·ªëi"} quy·ªÅn truy c·∫≠p`,
            data: permission,
        });
    } catch (error) {
        console.error("Error responding access:", error);
        return res.status(500).json({ error: "L·ªói x·ª≠ l√Ω y√™u c·∫ßu" });
    }
};

// 3Ô∏è‚É£ B·ªánh nh√¢n xem danh s√°ch ng∆∞·ªùi c√≥ quy·ªÅn truy c·∫≠p
exports.listAccess = async (req, res) => {
    try {
        const { patient_id } = req.params;

        const list = await AccessPermission.findAll({
            where: { patient_id, status: "accepted" },
            include: [
                { model: User, as: "viewer", attributes: ["user_id", "name", "email", "role"] },
            ],
        });

        return res.json(list);
    } catch (error) {
        console.error("Error listing access:", error);
        return res.status(500).json({ error: "L·ªói l·∫•y danh s√°ch quy·ªÅn truy c·∫≠p" });
    }
};

// 4Ô∏è‚É£ B·ªánh nh√¢n thu h·ªìi quy·ªÅn
exports.revokeAccess = async (req, res) => {
    try {
        const { id } = req.params;
        const io = req.app.get("io");

        const permission = await AccessPermission.findByPk(id);
        if (!permission) return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y quy·ªÅn n√†y" });

        await permission.destroy();

        io.emit("access-revoke", {
            viewer_id: permission.viewer_id,
            patient_id: permission.patient_id,
        });

        return res.json({ message: "ƒê√£ thu h·ªìi quy·ªÅn truy c·∫≠p" });
    } catch (error) {
        console.error("Error revoking access:", error);
        return res.status(500).json({ error: "L·ªói khi thu h·ªìi quy·ªÅn" });
    }
};
